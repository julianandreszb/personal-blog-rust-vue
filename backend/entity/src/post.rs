//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::Language;
use super::sea_orm_active_enums::Status;
use crate::category::CategoryWithName;
use crate::tag::TagWithName;
use sea_orm::entity::prelude::*;
use sea_orm::FromQueryResult;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "post")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    #[sea_orm(unique, comment = "URL friendly name")]
    pub slug: String,
    #[sea_orm(column_type = "Text")]
    pub excerpt: String,
    #[sea_orm(unique, comment = "Nuxt content md file name")]
    pub content_md_id: String,
    pub language: Option<Language>,
    pub featured_image: Option<String>,
    pub status: Option<Status>,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
}

// Final output structure
#[derive(Debug, Serialize)]
pub struct PostApiResponse {
    pub id: i32,
    pub title: String,
    pub slug: String,
    pub featured_image: Option<String>,
    pub updated_at: String,
    pub excerpt: String,
    pub categories: Vec<CategoryWithName>,
    pub tags: Vec<TagWithName>,
}

// Intermediate struct for database results
#[derive(Debug, FromQueryResult)]
pub struct PostPartial {
    pub id: i32,
    pub title: String,
    pub slug: String,
    pub featured_image: Option<String>,
    pub updated_at: Option<DateTime>,
    pub excerpt: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::post_category::Entity")]
    PostCategory,
    #[sea_orm(has_many = "super::post_tag::Entity")]
    PostTag,
}

impl Related<super::post_category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostCategory.def()
    }
}

impl Related<super::post_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostTag.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
